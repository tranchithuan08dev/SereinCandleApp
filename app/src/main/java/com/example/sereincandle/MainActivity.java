package com.example.sereincandle;

import android.content.Intent;
import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

// üí° C·∫¶N THI·∫æT: Import c√°c l·ªõp h·ªó tr·ª£ k·∫øt n·ªëi v√† b·ªè qua SSL/TLS
import com.example.sereincandle.network.ApiService;

import okhttp3.OkHttpClient;



import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MainActivity extends AppCompatActivity {

    private EditText etEmail, etPassword;
    private Button btnLogin;
    private TextView tvMessage;

    // BASE_URL CH√çNH X√ÅC: ƒê√£ th√™m /api/ v√† s·ª≠ d·ª•ng HTTPS/IP 10.0.2.2 (cho Android Emulator)
    private static final String BASE_URL = "https://10.0.2.2:7274/api/";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // 1. √Ånh x·∫° c√°c th√†nh ph·∫ßn UI
        etEmail = findViewById(R.id.etEmail);
        etPassword = findViewById(R.id.etPassword);
        btnLogin = findViewById(R.id.btnLogin);
        tvMessage = findViewById(R.id.tvMessage);

        // 2. Thi·∫øt l·∫≠p s·ª± ki·ªán l·∫Øng nghe cho n√∫t ƒêƒÉng nh·∫≠p
        btnLogin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performLogin();
            }
        });
    }

    /**
     * Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω vi·ªác l·∫•y d·ªØ li·ªáu v√† g·ªçi API, s·ª≠ d·ª•ng UnsafeOkHttpClient
     */
    private void performLogin() {
        // L·∫•y d·ªØ li·ªáu t·ª´ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        String email = etEmail.getText().toString().trim();
        String password = etPassword.getText().toString().trim();

        // 3. Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
        if (email.isEmpty() || password.isEmpty()) {
            tvMessage.setText("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Email v√† M·∫≠t kh·∫©u.");
            return;
        }

        // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng y√™u c·∫ßu
        // L∆ØU √ù: ƒê·∫£m b·∫£o class LoginRequest t·ªìn t·∫°i
        LoginRequest loginRequest = new LoginRequest(email, password);

        // 4. Kh·ªüi t·∫°o Retrofit

        // üí• B∆Ø·ªöC QUAN TR·ªåNG: L·∫•y OkHttpClient ƒë√£ b·ªè qua ki·ªÉm tra ch·ª©ng ch·ªâ (Unsafe)
        OkHttpClient unsafeClient = UnsafeOkHttpClient.getUnsafeOkHttpClient();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(BASE_URL)
                // üí• √Åp d·ª•ng client kh√¥ng an to√†n ƒë·ªÉ b·ªè qua l·ªói ch·ª©ng ch·ªâ SSL/TLS
                .client(unsafeClient)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        // L∆ØU √ù: ƒê·∫£m b·∫£o interface ApiService t·ªìn t·∫°i
        ApiService apiService = retrofit.create(ApiService.class);

        // 5. Th·ª±c hi·ªán cu·ªôc g·ªçi API
        // L∆ØU √ù: ƒê·∫£m b·∫£o class LoginResponse t·ªìn t·∫°i
        Call<LoginResponse> call = apiService.login(loginRequest);

        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        tvMessage.setText("ƒêang ƒëƒÉng nh·∫≠p...");

        call.enqueue(new Callback<LoginResponse>() {
            @Override
            public void onResponse(Call<LoginResponse> call, Response<LoginResponse> response) {
                // Ki·ªÉm tra m√£ tr·∫°ng th√°i HTTP (v√≠ d·ª•: 200 OK, 401 Unauthorized,...)
                if (response.isSuccessful() && response.body() != null) {
                    // ƒêƒÉng nh·∫≠p TH√ÄNH C√îNG (M√£ 2xx)
                    LoginResponse loginResponse = response.body();

                    // L·∫•y token th√¥ng qua h√†m ti·ªán √≠ch getToken() trong LoginResponse
                    String token = loginResponse.getToken();

                    // S·ª≠ d·ª•ng isSuccess() ho·∫∑c ki·ªÉm tra Token
                    if (token != null && !token.isEmpty()) {
                        // **TH√ÄNH C√îNG:** L∆∞u Token, chuy·ªÉn sang m√†n h√¨nh kh√°c, v.v.
                        tvMessage.setText(""); // X√≥a th√¥ng b√°o l·ªói

                        // L∆ØU √ù: ƒê·∫£m b·∫£o class HomePageActivity t·ªìn t·∫°i
                        Intent intent = new Intent(MainActivity.this, HomePageActivity.class);

                        // 2. T√πy ch·ªçn: G·ª≠i d·ªØ li·ªáu (v√≠ d·ª•: token) sang Activity m·ªõi
                        intent.putExtra("AUTH_TOKEN", token);

                        // 3. Kh·ªüi ch·∫°y Activity m·ªõi
                        startActivity(intent);

                        // 4. Quan tr·ªçng: K·∫øt th√∫c m√†n h√¨nh ƒëƒÉng nh·∫≠p
                        finish();
                    } else if (loginResponse.getMessage() != null) {
                        // TH·∫§T B·∫†I: Server tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng (200) nh∆∞ng c√≥ th√¥ng b√°o l·ªói
                        // ƒê√¢y l√† tr∆∞·ªùng h·ª£p √≠t g·∫∑p nh∆∞ng c√≥ th·ªÉ x·∫£y ra t√πy v√†o thi·∫øt k·∫ø API
                        tvMessage.setText("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: " + loginResponse.getMessage());
                    }

                } else {
                    // ƒêƒÉng nh·∫≠p TH·∫§T B·∫†I (M√£ 4xx, 5xx,...)
                    try {
                        // C·ªë g·∫Øng ƒë·ªçc n·ªôi dung l·ªói t·ª´ ph·∫£n h·ªìi
                        String errorBody = response.errorBody().string();
                        tvMessage.setText("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. M√£ l·ªói: " + response.code() + ". Chi ti·∫øt: " + errorBody);
                        Log.e("API_ERROR", "Error body: " + errorBody);
                    } catch (Exception e) {
                        tvMessage.setText("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. M√£ l·ªói: " + response.code());
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onFailure(Call<LoginResponse> call, Throwable t) {
                // X·∫£y ra l·ªói k·∫øt n·ªëi (Kh√¥ng c√≥ internet, server kh√¥ng ch·∫°y, sai BASE_URL,...)
                tvMessage.setText("L·ªói k·∫øt n·ªëi m·∫°ng: " + t.getMessage());
                Log.e("NETWORK_ERROR", "L·ªói: " + t.getMessage());
                t.printStackTrace();
            }
        });
    }
}